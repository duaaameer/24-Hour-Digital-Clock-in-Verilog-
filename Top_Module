`timescale 1ns / 1ps

module Top_Module(
    input clk, // FPGA clock
    input sw,  // Switch [0] to enable the clock
    input btnC, // Reset the clock
    input btnU, // Hour increment
    input btnR, // Minute increment
    output [6:0] seg,
    output [5:0] an, // Changed width to 6 bits
    output [7:0] led // Display second
);
    wire [3:0] s1, s2, m1, m2, h1, h2;
    reg hrup, minup;

    wire btnCclr, btnUclr, btnRclr;
    reg btnCclr_prev, btnUclr_prev, btnRclr_prev;

    // Instantiate the debounce modules
    debounce dbC(clk, btnC, btnCclr);
    debounce dbU(clk, btnU, btnUclr);
    debounce dbR(clk, btnR, btnRclr);

    // Instantiate 7-segment driver and digital clock modules
    sevenseg_driver seg7(clk, 1'b0, s1, s2, m1, m2, h1, h2, seg, an); // Updated
    digital_clock clock(clk, sw, btnCclr, hrup, minup, s1, s2, m1, m2, h1, h2);

    // Logic for hour and minute increment using push buttons
    always @(posedge clk) begin
        btnUclr_prev <= btnUclr; // Hour increment
        btnRclr_prev <= btnRclr; // Minute increment

        if (btnUclr_prev == 1'b0 && btnUclr == 1'b1)
            hrup <= 1'b1;
        else
            hrup <= 1'b0;
        if (btnRclr_prev == 1'b0 && btnRclr == 1'b1)
            minup <= 1'b1;
        else
            minup <= 1'b0;
    end
    // Display seconds on LEDs
    assign led[7:0] = {s2, s1};
endmodule
